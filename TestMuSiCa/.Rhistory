install.packages('Cairo')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.png')
install.packages('Cairo')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.png')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
original_prof <- mut_mat[,input$mysamp]
original_prof <- mut_mat[,mysamp]
mysamp[1]
mysamp[2]
mysamp[3]
mut_mat
original_prof <- mut_mat[,mysamp[2]]
original_prof
reconstructed_prof <- fit_res$reconstructed[,mysamp[2]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
fit_res$reconstructed
View(fit_res)
ggsave('./reconstructed_plot.png',height=6,width=10,dpi=ppi)
ggsave('./reconstructed_plot.png',height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = './reconstructed_table.txt', sep = "\t", quote=F, row.names=F)
#paste0('./reconstructed_table')
print("Hello world!\n")
for (i in 1:2){
#paste0('./reconstructed_table')
print("Hello world!")
}
for (i in 1:2){
#paste0('./reconstructed_table')
print(paste0('./reconstructed_table-',i,'.txt'))
}
length(mysamp)
length(setdiff(mysamp,'All samples'))
mysamp_temp = setdiff(mysamp,'All samples')
mysamp_temp
length(mysamp_temp)
#Plot reconstructed profile
mysamp_temp = setdiff(mysamp,'All samples')
for (i in 1:length(mysamp_temp)){
original_prof <- mut_mat[,mysamp_temp[i]]
reconstructed_prof <- fit_res$reconstructed[,mysamp_temp[i]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
ggsave(paste0('./reconstructed_table-',i,'.png'),height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = paste0('./reconstructed_table-',i,'.txt'), sep = "\t", quote=F, row.names=F)
}
strsplit(mysamp_temp[2], "\\.")
strsplit(mysamp_temp[2], "\\.")[1]
strsplit(mysamp_temp[2], "\\.")[[1]]
strsplit(mysamp_temp[2], "\\.")[[1]][1]
strsplit(mysamp_temp[2], "\\.tsv")[[1]]
strsplit(mysamp_temp[2], "\\.tsv")[[1]][1]
strsplit(mysamp_temp[1], "\\.tsv")[[1]]
#Plot reconstructed profile
mysamp_temp <- setdiff(mysamp,'All samples')
for (i in 1:length(mysamp_temp)){
mysamp_rename <- strsplit(mysamp_temp[1], "\\.tsv")[[1]]
original_prof <- mut_mat[,mysamp_temp[i]]
reconstructed_prof <- fit_res$reconstructed[,mysamp_temp[i]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
ggsave(paste0('./reconstructed_table(',mysamp_rename,').png'),height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = paste0('./reconstructed_table-',mysamp_rename,'.txt'), sep = "\t", quote=F, row.names=F)
}
for (i in 1:length(mysamp_temp)){
mysamp_rename <- strsplit(mysamp_temp[i], "\\.tsv")[[1]]
original_prof <- mut_mat[,mysamp_temp[i]]
reconstructed_prof <- fit_res$reconstructed[,mysamp_temp[i]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
ggsave(paste0('./reconstructed_table(',mysamp_rename,').png'),height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = paste0('./reconstructed_table(',mysamp_rename,').txt'), sep = "\t", quote=F, row.names=F)
}
#Plot reconstructed profile
mysamp_temp <- setdiff(mysamp,'All samples')
for (i in 1:length(mysamp_temp)){
mysamp_rename <- strsplit(mysamp_temp[i], "\\.tsv")[[1]]
original_prof <- mut_mat[,mysamp_temp[i]]
reconstructed_prof <- fit_res$reconstructed[,mysamp_temp[i]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
ggsave(paste0('./reconstructed_table(',mysamp_rename,').png'),height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = paste0('./reconstructed_table(',mysamp_rename,').txt'), sep = "\t", quote=F, row.names=F)
}
View(known_cancer_signatures)
#HeatMap
my.sel.cancers<-colnames(known_cancer_signatures)
a<-data.frame(my_contributions[1:30,], known_cancer_signatures[1:30,my.sel.cancers])
rownames(a)<-colnames(cancer_signatures)[1:30]
if (ncol(my_contributions)==1) colnames(a)[1]<-colnames(my_contributions) ## fix colnames when there is only one sample
for (i in 1:(ncol(a)-length(my.sel.cancers))) {
#a[,i]<-a[,i]/max(a[,i])  # don't do a rescaling
a[,i]<-a[,i]/sum(a[,i])   # put the proportions
}
for (i in (ncol(a)-length(my.sel.cancers)+1):ncol(a)) {
a[,i]<-a[,i]*2.5   # put the proportions   # 1 goes to 2.5 (light blue)
}
rownames(a)<-colnames(cancer_signatures)[1:30]
colorends <- c("white","red", "white", "blue")
dendro <- "column"
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson', file ='./comparison_with_cancers.html' )
mysamp_temp
length(mysamp_temp)
my_contributions
ncol(as.data.frame(my_contributions_mod))>=3
ncol(as.data.frame(my_contributions))>=3
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
#Download Plot 96 TABLE
aux_96_profile<-as.matrix(mut_mat[,setdiff(colnames(my_contributions),c("mean"))])
aux_ymax<-divisionRel(as.data.frame(aux_96_profile))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = './profile96.txt', sep = "\t", quote=F, row.names=F)
#DataTable
contr<- data.frame(Signature = 1:30, Proposed_Etiology = proposed_etiology, round(my_contributions,3))
#Download Table
write.table(x = contr, file = './COSMIC_sign_contributions.txt', sep = "\t", quote=F, row.names=F)
#HeatMap
a<-my_contributions
if (ncol(a)==1) colnames(a)<-colnames(my_contributions) ## fix colnames when there is only one sample
rownames(a)<-colnames(cancer_signatures)[1:30]
colorends <- c("white","red")
dendro <- "none"
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
#Plot reconstructed profile
mysamp_temp <- setdiff(mysamp,'All samples')
for (i in 1:length(mysamp_temp)){
mysamp_rename <- strsplit(mysamp_temp[i], "\\.tsv")[[1]]
original_prof <- mut_mat[,mysamp_temp[i]]
reconstructed_prof <- fit_res$reconstructed[,mysamp_temp[i]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
ggsave(paste0('./reconstructed_table(',mysamp_rename,').png'),height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = paste0('./reconstructed_table(',mysamp_rename,').txt'), sep = "\t", quote=F, row.names=F)
}
#HeatMap
my.sel.cancers<-colnames(known_cancer_signatures)
a<-data.frame(my_contributions[1:30,], known_cancer_signatures[1:30,my.sel.cancers])
rownames(a)<-colnames(cancer_signatures)[1:30]
if (ncol(my_contributions)==1) colnames(a)[1]<-colnames(my_contributions) ## fix colnames when there is only one sample
for (i in 1:(ncol(a)-length(my.sel.cancers))) {
#a[,i]<-a[,i]/max(a[,i])  # don't do a rescaling
a[,i]<-a[,i]/sum(a[,i])   # put the proportions
}
for (i in (ncol(a)-length(my.sel.cancers)+1):ncol(a)) {
a[,i]<-a[,i]*2.5   # put the proportions   # 1 goes to 2.5 (light blue)
}
rownames(a)<-colnames(cancer_signatures)[1:30]
colorends <- c("white","red", "white", "blue")
dendro <- "column"
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson', file ='./comparison_with_cancers.html' )
#######################################
my_contributions_mod <- my_contributions
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
}
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
png('./PCA_plot.png',height=7*300,width=7*300,res=300)
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
dev.off()
write.table(x = data.frame(ID=rownames(a),Sample=samplesnames),
file = './PCA.txt', sep="\t",quote=F,row.names=F)
}
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
#DataTable
contr<- data.frame(Signature = 1:30, Proposed_Etiology = proposed_etiology, round(my_contributions,3))
#Download Table
write.table(x = contr, file = './COSMIC_sign_contributions.txt', sep = "\t", quote=F, row.names=F)
#HeatMap
a<-my_contributions
if (ncol(a)==1) colnames(a)<-colnames(my_contributions) ## fix colnames when there is only one sample
rownames(a)<-colnames(cancer_signatures)[1:30]
colorends <- c("white","red")
dendro <- "none"
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
View(a)
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
#Plot reconstructed profile
mysamp_temp <- setdiff(mysamp,'All samples')
for (i in 1:length(mysamp_temp)){
mysamp_rename <- strsplit(mysamp_temp[i], "\\.tsv")[[1]]
original_prof <- mut_mat[,mysamp_temp[i]]
reconstructed_prof <- fit_res$reconstructed[,mysamp_temp[i]]
aux_ymax<-data.frame(original_prof,reconstructed_prof)
max_ymax<-max(divisionRel(aux_ymax))
plot_compare_profiles(original_prof,reconstructed_prof,profile_names=c("Original","Reconstructed"),profile_ymax = max_ymax)
ggsave(paste0('./reconstructed_table(',mysamp_rename,').png'),height=6,width=10,dpi=300)
#Download reconstructed TABLE
aux_ymax<-divisionRel(data.frame(Original_Profile = original_prof, Reconstructed_Profile = reconstructed_prof))
write.table(x = data.frame(Substitution_Type = cancer_signatures_mut_types[,1], Trinucleotide = cancer_signatures_mut_types[,2], Somatic_Mutation_Type = cancer_signatures_mut_types[,3], aux_ymax),
file = paste0('./reconstructed_table(',mysamp_rename,').txt'), sep = "\t", quote=F, row.names=F)
}
#HeatMap
my.sel.cancers<-colnames(known_cancer_signatures)
a<-data.frame(my_contributions[1:30,], known_cancer_signatures[1:30,my.sel.cancers])
rownames(a)<-colnames(cancer_signatures)[1:30]
if (ncol(my_contributions)==1) colnames(a)[1]<-colnames(my_contributions) ## fix colnames when there is only one sample
for (i in 1:(ncol(a)-length(my.sel.cancers))) {
#a[,i]<-a[,i]/max(a[,i])  # don't do a rescaling
a[,i]<-a[,i]/sum(a[,i])   # put the proportions
}
for (i in (ncol(a)-length(my.sel.cancers)+1):ncol(a)) {
a[,i]<-a[,i]*2.5   # put the proportions   # 1 goes to 2.5 (light blue)
}
rownames(a)<-colnames(cancer_signatures)[1:30]
colorends <- c("white","red", "white", "blue")
dendro <- "column"
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson', file ='./comparison_with_cancers.html' )
#######################################
my_contributions_mod <- my_contributions
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
png('./PCA_plot.png',height=7*300,width=7*300,res=300)
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
dev.off()
write.table(x = data.frame(ID=rownames(a),Sample=samplesnames),
file = './PCA.txt', sep="\t",quote=F,row.names=F)
}
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
library('Cairo')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,1)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, distfun = 'pearson',
file = './signatures_plot.html')
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson', file ='./comparison_with_cancers.png' )
myheatmap<- heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson')
dev.list()
plot()
dev.list()
dev.new()
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
png('./PCA_plot.png',height=7*300,width=7*300,res=300)
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
dev.off(png)
write.table(x = data.frame(ID=rownames(a),Sample=samplesnames),
file = './PCA.txt', sep="\t",quote=F,row.names=F)
}
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
png('./PCA_plot.png',height=7*300,width=7*300,res=300)
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
dev.off()
write.table(x = data.frame(ID=rownames(a),Sample=samplesnames),
file = './PCA.txt', sep="\t",quote=F,row.names=F)
}
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
png('./PCA_plot.png',height=7*300,width=7*300,res=300)
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
dev.off('png')
write.table(x = data.frame(ID=rownames(a),Sample=samplesnames),
file = './PCA.txt', sep="\t",quote=F,row.names=F)
}
#######################################
if (ncol(as.data.frame(my_contributions_mod))>=3) {
a<-t(as.data.frame(my_contributions_mod[30:1,]))
for (i in 1:nrow(a)) {
a[i,]<-a[i,]/sum(a[i,])   # put the proportions
}
a<-a[,which(apply(a,2,sd)>0)]# remove signatures without variation
samplesnames<-rownames(a)
rownames(a)<-1:(length(rownames(a)))
png('./PCA_plot.png',height=7*300,width=7*300,res=300)
pca <- prcomp(a, scale=T)
plot(pca$x[,1], pca$x[,2],        # x y and z axis
col="red", pch=19,
xlab=paste("Comp 1: ",round(pca$sdev[1]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
ylab=paste("Comp 2: ",round(pca$sdev[2]^2/sum(pca$sdev^2)*100,1),"%",sep=""),
xlim=c(min(pca$x[,1])-0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ,max(pca$x[,1])+0.5*(  max(pca$x[,1])-min(pca$x[,1]) ) ),
ylim=c(min(pca$x[,2])-0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ,max(pca$x[,2])+0.5*(  max(pca$x[,2])-min(pca$x[,2]) ) ),
main="PCA")
text(pca$x[,1], pca$x[,2]-0.15, rownames(a))
dev.off()
write.table(x = data.frame(ID=rownames(a),Sample=samplesnames),
file = './PCA.txt', sep="\t",quote=F,row.names=F)
}
x11()
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson', file ='./comparison_with_cancers.png' )
dev.list()
dev.list()
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
dev.list()
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
library("BSgenome")
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/Env_setting.R')
library("BSgenome")
library("Cairo")
#variables setting
#######################################
genome <- 'hg38'
datafolder <- '~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/'
studytype <- 'WGS'
#  name = c('TLCRC_020.hard-filtered_vep.annotation.tsv','TLCRC_020_hard-filtered-2.tsv'),
#  size = c(3350434,7226227),
#  type = c(NA,NA)
#  )
# inFile<-data.frame(
#   datapath = c('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/TLCRC_020.hard-filtered_vep.annotation.tsv'),
#   name = c('TLCRC_020.hard-filtered_vep.annotation.tsv'),
#   size = c(3350434),
#   type = c(NA)
# )
inFile<-data.frame(
datapath = c('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/TLCRC_020.hard-filtered_vep.annotation.tsv',
'~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/TLCRC_043.hard-filtered.tsv',
'~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/TLCRC_047.hard-filtered.tsv'),
name = c('TLCRC_020.hard-filtered_vep.annotation.tsv','TLCRC_043.hard-filtered.tsv', 'TLCRC_047.hard-filtered.tsv'),
size = c(NA,NA,NA),
type = c(NA,NA,NA)
)
#######################################
#Reference genome definition and loading [ref_genome]
#######################################
if (genome=="19"){
ref_genome <- "BSgenome.Hsapiens.UCSC.hg19"
library(ref_genome, character.only = TRUE)
}else if (genome=="37"){
ref_genome <- "BSgenome.Hsapiens.1000genomes.hs37d5"
library(ref_genome, character.only = TRUE)
}else if (genome=="hg38"){
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
}
ref_genome <- "BSgenome.Hsapiens.UCSC.hg19"
#######################################
#Reference genome definition and loading [ref_genome]
#######################################
if (genome=="19"){
ref_genome <- "BSgenome.Hsapiens.UCSC.hg19"
library(ref_genome, character.only = TRUE)
}else if (genome=="37"){
ref_genome <- "BSgenome.Hsapiens.1000genomes.hs37d5"
library(ref_genome, character.only = TRUE)
}else if (genome=="hg38"){
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
}
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
dev.list()
x11()
dev.list()
plot()
dev.list()
dev.new()
dev.list()
heatmaply(a, scale_fill_gradient_fun = scale_fill_gradientn(colours = colorends, limits = c(0,3)),
dendrogram = dendro, k_row = 1, k_col = 1, column_text_angle = 90, hide_colorbar = TRUE,
distfun = 'pearson', file ='./comparison_with_cancers.html' )
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
dev.list()
dev.new()
dev.list()
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
View(cancer_signatures_mut_types)
dev.list()
paste0(resultfolder,'/mutation_counts_plot.png')
resultfolder <- '~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/results'
paste0(resultfolder,'/mutation_counts_plot.png')
ggsave(paste0(resultfolder,'/mutation_counts_plot.png'),height=min(2*nrow(mutation_counts_new),40),width=25,dpi=300,units="cm")
paste0(resultfolder,'/reconstructed_table(',mysamp_rename,').txt')
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
source('~/Desktop/Work/DIGI/NHRI/03_Group_project/04TestMuSiCa/ReferenceGenomeTest.R')
